import { type ContractRunner } from "ethers";
import type { L2MessageVerification, L2MessageVerificationInterface } from "../L2MessageVerification";
export declare class L2MessageVerification__factory {
    static readonly abi: readonly [{
        readonly type: "function";
        readonly name: "proveL2LeafInclusionShared";
        readonly inputs: readonly [{
            readonly name: "_chainId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_blockOrBatchNumber";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_leafProofMask";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_leaf";
            readonly type: "bytes32";
            readonly internalType: "bytes32";
        }, {
            readonly name: "_proof";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "proveL2LogInclusionShared";
        readonly inputs: readonly [{
            readonly name: "_chainId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_blockOrBatchNumber";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_index";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_log";
            readonly type: "tuple";
            readonly internalType: "struct L2Log";
            readonly components: readonly [{
                readonly name: "l2ShardId";
                readonly type: "uint8";
                readonly internalType: "uint8";
            }, {
                readonly name: "isService";
                readonly type: "bool";
                readonly internalType: "bool";
            }, {
                readonly name: "txNumberInBatch";
                readonly type: "uint16";
                readonly internalType: "uint16";
            }, {
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "key";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }, {
                readonly name: "value";
                readonly type: "bytes32";
                readonly internalType: "bytes32";
            }];
        }, {
            readonly name: "_proof";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "function";
        readonly name: "proveL2MessageInclusionShared";
        readonly inputs: readonly [{
            readonly name: "_chainId";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_blockOrBatchNumber";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_index";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }, {
            readonly name: "_message";
            readonly type: "tuple";
            readonly internalType: "struct L2Message";
            readonly components: readonly [{
                readonly name: "txNumberInBatch";
                readonly type: "uint16";
                readonly internalType: "uint16";
            }, {
                readonly name: "sender";
                readonly type: "address";
                readonly internalType: "address";
            }, {
                readonly name: "data";
                readonly type: "bytes";
                readonly internalType: "bytes";
            }];
        }, {
            readonly name: "_proof";
            readonly type: "bytes32[]";
            readonly internalType: "bytes32[]";
        }];
        readonly outputs: readonly [{
            readonly name: "";
            readonly type: "bool";
            readonly internalType: "bool";
        }];
        readonly stateMutability: "view";
    }, {
        readonly type: "error";
        readonly name: "HashedLogIsDefault";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "InvalidProofLengthForFinalNode";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "MerkleIndexOutOfBounds";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "MerklePathEmpty";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "MerklePathOutOfBounds";
        readonly inputs: readonly [];
    }, {
        readonly type: "error";
        readonly name: "UnsupportedProofMetadataVersion";
        readonly inputs: readonly [{
            readonly name: "metadataVersion";
            readonly type: "uint256";
            readonly internalType: "uint256";
        }];
    }];
    static createInterface(): L2MessageVerificationInterface;
    static connect(address: string, runner?: ContractRunner | null): L2MessageVerification;
}
