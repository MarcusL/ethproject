import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common";
export interface L2InteropRootStorageInterface extends Interface {
    getFunction(nameOrSignature: "addInteropRoot" | "interopRoots"): FunctionFragment;
    getEvent(nameOrSignatureOrTopic: "InteropRootAdded"): EventFragment;
    encodeFunctionData(functionFragment: "addInteropRoot", values: [BigNumberish, BigNumberish, BytesLike[]]): string;
    encodeFunctionData(functionFragment: "interopRoots", values: [BigNumberish, BigNumberish]): string;
    decodeFunctionResult(functionFragment: "addInteropRoot", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "interopRoots", data: BytesLike): Result;
}
export declare namespace InteropRootAddedEvent {
    type InputTuple = [
        chainId: BigNumberish,
        blockNumber: BigNumberish,
        sides: BytesLike[]
    ];
    type OutputTuple = [
        chainId: bigint,
        blockNumber: bigint,
        sides: string[]
    ];
    interface OutputObject {
        chainId: bigint;
        blockNumber: bigint;
        sides: string[];
    }
    type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    type Filter = TypedDeferredTopicFilter<Event>;
    type Log = TypedEventLog<Event>;
    type LogDescription = TypedLogDescription<Event>;
}
export interface L2InteropRootStorage extends BaseContract {
    connect(runner?: ContractRunner | null): L2InteropRootStorage;
    waitForDeployment(): Promise<this>;
    interface: L2InteropRootStorageInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    addInteropRoot: TypedContractMethod<[
        chainId: BigNumberish,
        blockOrBatchNumber: BigNumberish,
        sides: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    interopRoots: TypedContractMethod<[
        chainId: BigNumberish,
        blockOrBatchNumber: BigNumberish
    ], [
        string
    ], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "addInteropRoot"): TypedContractMethod<[
        chainId: BigNumberish,
        blockOrBatchNumber: BigNumberish,
        sides: BytesLike[]
    ], [
        void
    ], "nonpayable">;
    getFunction(nameOrSignature: "interopRoots"): TypedContractMethod<[
        chainId: BigNumberish,
        blockOrBatchNumber: BigNumberish
    ], [
        string
    ], "view">;
    getEvent(key: "InteropRootAdded"): TypedContractEvent<InteropRootAddedEvent.InputTuple, InteropRootAddedEvent.OutputTuple, InteropRootAddedEvent.OutputObject>;
    filters: {
        "InteropRootAdded(uint256,uint256,bytes32[])": TypedContractEvent<InteropRootAddedEvent.InputTuple, InteropRootAddedEvent.OutputTuple, InteropRootAddedEvent.OutputObject>;
        InteropRootAdded: TypedContractEvent<InteropRootAddedEvent.InputTuple, InteropRootAddedEvent.OutputTuple, InteropRootAddedEvent.OutputObject>;
    };
}
